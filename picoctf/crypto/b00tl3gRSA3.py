import math

import sympy
from Crypto.Util.number import inverse, isPrime, long_to_bytes

c = 14311461536099868686332268472056746899540331613354096457194296708290227960005587269522016607233653769319536868885473310699449401577831414942503826394876214442301020577202313593826969717101745203121824757227516995034867308443032072235511440620499149389830069541022586417809501171359794975095555313078901520928570441241034968091092565924451040418
n = 14389464994040155043074826761864721235100350404281261366725939061384282565501021566225830202182905348307786869126889929635184115731129529844286243947595282488881349455925650877810549654217796068112804871700680893943863750667048243510955278929479060064042872449476967369749334121819132812723323577092055166200690804723338699704093543089000322549
e = 65537

factors = sympy.factorint(n)
phi = 1
for pi, ei in factors.items():  # type: ignore
    assert isPrime(pi, false_positive_prob=1e-20), f'{pi} may be not prime'
    assert ei == 1
    phi *= pi - 1

assert 1 < e < phi
assert math.gcd(e, phi) == 1
d = inverse(e, phi)

assert d * e % phi == 1
assert pow(2, phi, n) == 1

m = pow(c, d, n)
print(long_to_bytes(m))
